# -*- coding: utf-8 -*-
"""facemask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TfL90jIy6rN93WTnZk6kgcotdxV9cYUa
"""

!pip install kaggle

#Configuring the path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# API to fetch the dataset from the kaggle
!kaggle datasets download -d omkargurav/face-mask-dataset

# extracting the dataset
from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

!ls

"""Importing the libraries"""

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_file=os.listdir('/content/data/with_mask')
print(with_mask_file[0:7])
print(with_mask_file[-5:])

without_mask_file=os.listdir('/content/data/without_mask')
print(without_mask_file[0:8])

print('Number of person with mask : ',len(with_mask_file))
print('Number of person without mask : ',len(without_mask_file))

"""**Create a lables for two class of images**

with mask = 1
without mask = 0
"""

#creating a list
with_mask_labels = [1]*3725

without_mask_labels = [0]*3828

print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

print(len(with_mask_labels))
print(len(without_mask_labels))

labels = with_mask_labels + without_mask_labels
print(len(labels))
print(labels[0:10])
print(labels[-10:])

"""**Displaying the images**"""

# displaying mask images
img =mpimg.imread('/content/data/with_mask/with_mask_315.jpg')
imgplot = plt.imshow(img)
plt.show()

img =mpimg.imread('/content/data/with_mask/with_mask_3238.jpg')
imgplot = plt.imshow(img)
plt.show()

#without mask
img =mpimg.imread('/content/data/without_mask/without_mask_474.jpg')
imgplot = plt.imshow(img)
plt.show()

img =mpimg.imread('/content/data/without_mask/without_mask_1723.jpg')
imgplot = plt.imshow(img)
plt.show()

"""**Image Processing**"""

# Resize the images
# Convert the images to numpy arrays
with_mask_path = '/content/data/with_mask/'
data = []
for img_file in with_mask_file:
  image=Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

#for without mask

without_mask_path = '/content/data/without_mask/'
for img_file in without_mask_file:
  image=Image.open(without_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

print(len(data))
print(type(data))

data[0]

type(data[0])

data[0].shape

# converting the labels and data to numpy array

x = np.array(data)
y = np.array(labels)

type(x)

type(y)

print(x.shape)
print(y.shape)

print(y)

"""**Train Test Split**"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state = 10)

print(x.shape,X_train.shape,X_test.shape)

# Scaling the data
# previously the values are between 0 - 255
# after scaling the values are between 0 - 1
X_train_scaled = X_train/255

X_test_scaled = X_test/255

X_train[0]

X_train_scaled[0]

"""**Building a Convolutional Neural Network**"""

# tensorflow is used to build the CNN
# keras requires tensorflow in the backend
import tensorflow as tf
from tensorflow import keras

num_of_classes = 2
model = keras.Sequential()

model.add(keras.layers.Conv2D(32, kernel_size = (3,3), activation= 'relu', input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(pool_size = (2,2)))

model.add(keras.layers.Conv2D(64, kernel_size = (3,3), activation= 'relu'))
model.add(keras.layers.MaxPooling2D(pool_size = (2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

#sigmoid for binary classification
model.add(keras.layers.Dense(num_of_classes, activation = 'sigmoid'))

# Compile the neural network
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])

# Training the neural network
history = model.fit(X_train_scaled,Y_train, validation_split=0.1, epochs=5 )

# Model evaluation
loss, accuracy  = model.evaluate(X_test_scaled, Y_test)
print("Test Accuracy = ",accuracy)

h =history

#plotting the loss value
plt.plot(h.history['loss'],label='traning loss')
plt.plot(h.history['val_loss'],label='validation loss')
plt.legend()
plt.show()

#Accuracy value
plt.plot(h.history['acc'],label='traning accuracy')
plt.plot(h.history['val_acc'],label='validation accuracy')
plt.legend()
plt.show()

"""**Prediction**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')